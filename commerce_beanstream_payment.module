<?php

/** this module was adapted from the authorize.net payment method module and the commerce payment method example */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_beanstream_payment_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_beanstream_payment'] = array(
    'title' => t('Beanstream Payment Method'),
    'short_title' => t('Beanstream'),
    'display_title' => t('Credit Card Beanstream'),
    'description' => t('Payment method for Beanstream.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

function commerce_beanstream_payment_menu() {
  $items = array();
  /** Creates a menu for voiding transactions. */
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/beanstream-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_beanstream_void_form', 3, 5),
    'access callback' => 'commerce_beanstream_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_beanstream.admin.inc',
  );
 return $items;
}


function commerce_beanstream_void_access($order, $transaction) {
  if ($transaction->payment_method != 'commerce_beanstream_payment' || empty($transaction->remote_id)){
    //||!in_array(strtoupper($transaction->remote_status), array('AUTH_ONLY', 'PRIOR_AUTH_CAPTURE', 'AUTH_CAPTURE'))) {
    return FALSE;
  }

  // Return FALSE if it is more than 24 hours since the last update to the
  // transaction, as it will already have been settled.

  if (time() - $transaction->changed > 2600 * 24) {
    return FALSE;
  }

  // Allow access if the user can update this transaction 
  return commerce_payment_transaction_access('update', $transaction);
}


/**
 * Payment method callback: submit form.
 */
function commerce_beanstream_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

    if (!empty($card_types)) {
      $fields['type'] = $card_types;
    }    
  }
  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_beanstream_payment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Validate the credit card fields.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }

}

/**
 * Payment method callback: submit form submission.
 */
function commerce_beanstream_payment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_beanstream_payment'] = $pane_values;

  $result = commerce_beanstream_payment_transaction($payment_method, $order, $charge, $pane_values);
  // if $result is equal to FALSE, the credit card has been declined - stop checkout and give user msg
  if($result == FALSE) {
    return FALSE;
  }
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_beanstream_payment_transaction($payment_method, $order, $charge, $pane_values){

  //transaction info
  $transaction = commerce_payment_transaction_new('commerce_beanstream_payment', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->message = 'Name: @name';

  //get billing address
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $name_on_card = $billing_address['name_line'];
  $street_address = $billing_address['thoroughfare'];
  $street_address_2 = $billing_address['premise'];
  $city = $billing_address['locality'];
  $postal = $billing_address['postal_code'];
  $province = $billing_address['administrative_area'];
  $country = $billing_address['country'];
  $phone_number_name = $payment_method['settings']['phone_field_name'];

  if(isset($order_wrapper->commerce_customer_billing)){
    $phone_number = $order_wrapper->commerce_customer_billing->$phone_number_name->value();
  }
  //get shipping details
  if(isset($order_wrapper->commerce_customer_shipping)){
    $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
    $ship_name_on_card = $shipping_address['name_line'];
    $ship_street_address = $shipping_address['thoroughfare'];
    $ship_street_address_2 = $shipping_address['premise'];
    $ship_city = $shipping_address['locality'];
    $ship_postal = $shipping_address['postal_code'];
    $ship_province = $shipping_address['administrative_area'];
    $ship_country = $shipping_address['country'];
  }
  //get credit card details
  $card_number = $pane_values['credit_card']['number'];
  $card_exp_month = $pane_values['credit_card']['exp_month'];
  $card_exp_year = substr($pane_values['credit_card']['exp_year'], -2);

  //build the request
  $request = array(
    'merchant_id' => $payment_method['settings']['merchant_ID'],
    'requestType' => 'BACKEND',
    'trnOrderNumber' => $order->order_id,
    'trnAmount' => number_format(commerce_currency_amount_to_decimal($transaction->amount,$transaction->currency_code),2),
    'trnCardOwner' => $name_on_card,
    'trnCardNumber' => $card_number,
    'trnExpMonth' => $card_exp_month,
    'trnExpYear' => $card_exp_year,
    'trnType' => 'P', 
    'ordName' => $name_on_card,
    'ordAddress1' => $street_address,
    'ordAddress2' => $street_address_2,
    'ordCity' => $city,
    'ordProvince' => $province,
    'ordCountry' => $country,
    'ordEmailAddress' => substr($order->mail, 0, 255),
    'ordPostalCode' =>$postal,
    'ordPhoneNumber' =>$phone_number,
    'shipName' => $ship_name_on_card,
    'shipAddress1' => $ship_street_address,
    'shipAddress2' => $ship_street_address_2,
    'shipCity' => $ship_city,
    'shipProvince' => $ship_province,
    'shipCountry' => $ship_country,
    'shipPostalCode' =>$ship_postal,
  );

  //send request
  $txnResponse = commerce_beanstream_request($payment_method, $request);

  //parse response string into variables
  parse_str($txnResponse, $response);

  //if declined set the tranaction status to false
  if($response['trnApproved'] != '1'  || empty($response['trnApproved'])){
     $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }else{
  //otheriwse set transaction status appropriately
    // Set the transaction status based on the type of transaction this was.
      switch ($payment_method['settings']['txn_type']) {
        case COMMERCE_CREDIT_AUTH_ONLY:
          $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
          break;

        case COMMERCE_CREDIT_AUTH_CAPTURE:
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          break;
      }
  }

 //set tranaction variables to those returned from Beanstream
 $transaction->remote_id = $response['trnId'];
 $transaction->remote_status = $response['paymentMethod']; 
 $transaction->payload[REQUEST_TIME] = $response;

 //set a msg to return to user
 $message = 'Your transacton has been <b>' . $response['messageText'] . '</b>';

 $transaction->message = $message; 

 // save the transaction
 commerce_payment_transaction_save($transaction);

 // if the transaction is declined return false send error to user
   if($response['trnApproved'] != '1'){
      drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
      drupal_set_message(check_plain($response['messageText']), 'error');
      return FALSE;
   }

  return $transaction;

}

/**
 * Returns the default settings for the beanstream payment method.
 */
function commerce_beanstream_default_settings() {
  return array(
    'payment_url' => 'https://www.beanstream.com/scripts/process_transaction.asp', //SOAP URL https://www.beanstream.com/api/v1/payments
    'merchant_ID' => '',
    'username' => '',
    'password' => '',
    'phone_field_name' => '',
    'method' => 'card',
    'card_types' => array(),
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
  );
}
/** Create a settings form for the required Beanstream settings */

function commerce_beanstream_payment_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_beanstream_default_settings();
  $form = array();

  // Get the options for the phone fields to populate the possible phone fields availble
  $phone_fields = field_read_fields(array('type' => 'phone'));
  $phone_field_names = array();
  foreach ($phone_fields as $phone_field){
    $name = $phone_field['field_name'];
    $phone_field_names[$name] = $name;
  }

  $form['payment_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Beanstream Payment URL'),
    '#description' => t('POST URI for Beanstream purchases'),
    '#default_value' => $settings['payment_url'],
    '#required' => TRUE,
  );
  $form['merchant_ID'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your merchant ID provided by Beanstream.'),
    '#default_value' => $settings['merchant_ID'],
    '#required' => TRUE,
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Your username, created in the Beanstream customer interface.'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );
  $form['phone_field_name'] = array(
    '#type' => 'select',
    '#title' => t('Phone number field name'),
    '#description' => t('Beanstream requires a phone number to process payments.  This module requires that you use the phone module (https://drupal.org/project/phone) to attach a phone field to the customer billing profile (http://yourdrupal/commerce/customer-profiles/types).  This select box lists all field names available of the phone type.  Select the one that you created for the profile.'),
    '#default_value' => $settings['phone_field_name'],
    '#required' => TRUE,
    '#options' => $phone_field_names,
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Your password, created in the Beanstream customer interface.'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );
  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );
   $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );




  return $form;
}

/** send transaction request to beanstream to process */

function commerce_beanstream_request($payment_method, $request){
   $beanstream_url = $payment_method['settings']['payment_url'];
   
   $request += array(
      'username' => $payment_method['settings']['username'],
      'password' => $payment_method['settings']['password'],
      'merchant_id' => $payment_method['settings']['merchant_ID'],
      'requestType' => 'BACKEND',
    );
    
  // Initialize curl
  $ch = curl_init();
  // Get curl to POST
  curl_setopt( $ch, CURLOPT_POST, 1 );
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,0); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
  // Instruct curl to suppress the output from Online Mart, and to directly
  // return the transfer instead. (Output will be stored in $txResult.) 
  curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1 ); 
  // This is the location of the Online Mart payment gateway
  curl_setopt( $ch, CURLOPT_URL, $beanstream_url);
  // These are the transaction parameters that we will POST 
  curl_setopt( $ch, CURLOPT_POSTFIELDS,http_build_query($request));
// Now POST the transaction. $txResult will contain Online Mart's response
  $txResult = curl_exec( $ch );
  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_beamstream_payment', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close( $ch );
  return $txResult;
  // Make the response an array and trim off the encapsulating characters.
}
