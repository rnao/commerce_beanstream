<?php

/** this module was adapted from the authorize.net payment method module and the commerce payment method example */


require_once(drupal_get_path('module','commerce_beanstream_payment').'/includes/commerce_beanstream.api.inc');
require_once(drupal_get_path('module','commerce_beanstream_payment').'/includes/commerce_beanstream.cardonfile.callbacks.inc');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_beanstream_payment_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_beanstream_payment'] = array(
    'active' => TRUE,
    'title' => t('Beanstream Payment Method'),
    'short_title' => t('Beanstream'),
    'display_title' => t('Credit Card'),
    'description' => t('Payment method for Beanstream.'),
    'cardonfile' => array(
      'charge callback' => 'commerce_beanstream_cardonfile_charge',
      'update callback' => 'commerce_beanstream_cardonfile_update',
      'delete callback' => 'commerce_beanstream_cardonfile_delete',
      #'create callback' => 'commerce_beanstream_cardonfile_create',
    ),
  );

  return $payment_methods;
}

function commerce_beanstream_payment_menu() {
  $items = array();
  /** Creates a menu for voiding transactions. */
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/beanstream-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_beanstream_void_form', 3, 5),
    'access callback' => 'commerce_beanstream_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_beanstream.admin.inc',
  );
 return $items;
}


function commerce_beanstream_void_access($order, $transaction) {
  if ($transaction->payment_method != 'commerce_beanstream_payment' || empty($transaction->remote_id)){
    //||!in_array(strtoupper($transaction->remote_status), array('AUTH_ONLY', 'PRIOR_AUTH_CAPTURE', 'AUTH_CAPTURE'))) {
    return FALSE;
  }

  // Return FALSE if it is more than 24 hours since the last update to the
  // transaction, as it will already have been settled.

  if (time() - $transaction->changed > 2600 * 24) {
    return FALSE;
  }

  // Allow access if the user can update this transaction 
  return commerce_payment_transaction_access('update', $transaction);
}


/**
 * Payment method callback: submit form.
 */
function commerce_beanstream_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

    if (!empty($card_types)) {
      $fields['type'] = $card_types;
    }    
  }
  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_beanstream_payment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // If the customer specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return;
  }

  // Validate the credit card fields.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_beanstream_payment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  // Get billing address
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if( isset($order_wrapper->commerce_customer_billing) ) {
    $billing = $order_wrapper->commerce_customer_billing;
    $billing_address = $billing->commerce_customer_address->value();
  } else {
    drupal_set_message(t('A billing address must be available to perform a transaction'), 'error');
    return FALSE;
  }

  // If the customer specified payment using a card on file, attempt that now
  // and simply return the result.
  if (module_exists('commerce_cardonfile') && $payment_method['settings']['cardonfile'] &&
    !empty($pane_values['cardonfile']) && !empty($billing_address)) {


    // Create a new profile, and then run the transaction
    if ($pane_values['cardonfile'] === 'new') {

      # make the request here..
      $card = _commerce_beanstream_payment_create_profile($payment_method, $order, $pane_form, $pane_values, $billing);

      if (!empty($card)) {
        # Run the transaction
        return commerce_beanstream_cardonfile_charge($payment_method, $card, $order, $charge);
      } else {
        return FALSE;
      }

    // Use an existing profile
    } else {
      # This should use the "charge callback" too
      $card = commerce_cardonfile_load($pane_values['cardonfile']);
      // Fail now if it is no longer available or the card is inactive.
      if (empty($card) || $card->status == 0) {
        drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
        return FALSE;
      }

      return commerce_beanstream_cardonfile_charge($payment_method, $card, $order, $charge);
    }

  // No Card on File.
  } else {

    $order->data['commerce_beanstream_payment'] = $pane_values;

    $result = commerce_beanstream_payment_transaction($payment_method, $order, $charge, $pane_values);
    // if $result is equal to FALSE, the credit card has been declined - stop checkout and give user msg
    if($result == FALSE) {
      return FALSE;
    }

    return TRUE;
  }
}

function commerce_beanstream_payment_cardonfile_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // First attempt to load the card on file.
  $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

  // Fail now if it is no longer available or the card is inactive.
  if (empty($card_data) || $card_data->status == 0) {
    drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
    return FALSE;
  }

  return commerce_beanstream_cardonfile_charge($payment_method, $card_data, $order, $charge);
}



/**
 * Returns the default settings for the beanstream payment method.
 */
function commerce_beanstream_default_settings() {
  return array(
    'payment_url' => COMMERCE_BEANSTREAM_PAYMENT_URL,
    'payment_profile_url' => COMMERCE_BEANSTREAM_PAYMENT_PROFILE_URL,
    'merchant_ID' => '',
    'username' => '',
    'password' => '',
    'passcode' => '',
    'phone_field_name' => '',
    'method' => 'card',
    'card_types' => array(),
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
  );
}
/** Create a settings form for the required Beanstream settings */

function commerce_beanstream_payment_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_beanstream_default_settings();
  $form = array();

  // Get the options for the phone fields to populate the possible phone fields availble
  $phone_fields = field_read_fields(array('type' => 'phone'));
  $phone_field_names = array();
  foreach ($phone_fields as $phone_field){
    $name = $phone_field['field_name'];
    $phone_field_names[$name] = $name;
  }

  $form['payment_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Beanstream Payment URL'),
    '#description' => t('POST URI for Beanstream purchases'),
    '#default_value' => $settings['payment_url'],
    '#required' => TRUE,
  );
  $form['payment_profile_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Beanstream Payment Profile URL'),
    '#description' => t('POST URI for Beanstream payment profiles'),
    '#default_value' => $settings['payment_profile_url'],
    '#required' => TRUE,
  );
  $form['merchant_ID'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your merchant ID provided by Beanstream.'),
    '#default_value' => $settings['merchant_ID'],
    '#required' => TRUE,
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Your username, created in the Beanstream customer interface.'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Your password, created in the Beanstream customer interface.'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );
  $form['passcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Pass Code'),
    '#description' => t('API access passcode that has been generated on the payment profile configuration page.'),
    '#default_value' => $settings['passcode'],
    '#required' => TRUE,
  );
  $form['phone_field_name'] = array(
    '#type' => 'select',
    '#title' => t('Phone number field name'),
    '#description' => t('Beanstream requires a phone number to process payments.  This module requires that you use the phone module (https://drupal.org/project/phone) to attach a phone field to the customer billing profile (http://yourdrupal/commerce/customer-profiles/types).  This select box lists all field names available of the phone type.  Select the one that you created for the profile.'),
    '#default_value' => $settings['phone_field_name'],
    '#required' => TRUE,
    '#options' => $phone_field_names,
  );
  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );
   $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );


  // Secure Payment Profile support in conjunction with Beanstream requires the Card on File module.
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method using Beanstream Secure Payment Profiles.'),
      '#description' => t('This allows the use of Secure Payment Profiles to store Card information at Beanstream.'),
      '#default_value' => $settings['cardonfile'],
    );
  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File funcitionality download and install the Card on File module.'),
    );
  }

  return $form;
}
